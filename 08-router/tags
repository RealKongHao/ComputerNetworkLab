!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARPHRD_ETHER	./include/arp.h	8;"	d
ARPOP_REPLY	./include/arp.h	11;"	d
ARPOP_REQUEST	./include/arp.h	10;"	d
ARP_ENTRY_TIMEOUT	./include/arpcache.h	11;"	d
ARP_REQUEST_MAX_RETRIES	./include/arpcache.h	12;"	d
BE_IP_FMT_STR	./include/ip.h	48;"	d
CC	./Makefile	/^CC = gcc$/;"	m
CFLAGS	./Makefile	/^CFLAGS = -g -Wall -Iinclude$/;"	m
DEBUG	./include/log.h	/^enum log_level { DEBUG = 0, INFO, WARNING, ERROR };$/;"	e	enum:log_level
DEFAULT_TTL	./include/types.h	8;"	d
ERROR	./include/log.h	/^enum log_level { DEBUG = 0, INFO, WARNING, ERROR };$/;"	e	enum:log_level
ETHER_HDR_SIZE	./include/ether.h	19;"	d
ETH_ALEN	./include/ether.h	6;"	d
ETH_FRAME_LEN	./include/ether.h	7;"	d
ETH_P_ALL	./include/ether.h	9;"	d
ETH_P_ARP	./include/ether.h	11;"	d
ETH_P_IP	./include/ether.h	10;"	d
HASH_16BITS	./include/hash.h	7;"	d
HASH_8BITS	./include/hash.h	6;"	d
HDRS	./Makefile	/^HDRS = .\/include\/*.h$/;"	m
HOST_IP_FMT_STR	./include/ip.h	56;"	d
HOST_IP_FMT_STR	./include/ip.h	58;"	d
ICMP_COPIED_DATA_LEN	./include/icmp.h	28;"	d
ICMP_DEST_UNREACH	./include/icmp.h	32;"	d
ICMP_ECHOREPLY	./include/icmp.h	31;"	d
ICMP_ECHOREQUEST	./include/icmp.h	30;"	d
ICMP_EXC_TTL	./include/icmp.h	42;"	d
ICMP_HDR_SIZE	./include/icmp.h	27;"	d
ICMP_HOST_UNREACH	./include/icmp.h	37;"	d
ICMP_NET_UNREACH	./include/icmp.h	36;"	d
ICMP_PORT_UNREACH	./include/icmp.h	39;"	d
ICMP_PROT_UNREACH	./include/icmp.h	38;"	d
ICMP_TIME_EXCEEDED	./include/icmp.h	33;"	d
INFO	./include/log.h	/^enum log_level { DEBUG = 0, INFO, WARNING, ERROR };$/;"	e	enum:log_level
IPPROTO_OSPFv2	./include/ip.h	15;"	d
IP_BASE_HDR_SIZE	./include/ip.h	38;"	d
IP_DATA	./include/ip.h	40;"	d
IP_DF	./include/ip.h	18;"	d
IP_FMT	./include/ip.h	42;"	d
IP_HDR_SIZE	./include/ip.h	39;"	d
LD	./Makefile	/^LD = gcc$/;"	m
LDFLAGS	./Makefile	/^LDFLAGS = $/;"	m
LE_IP_FMT_STR	./include/ip.h	43;"	d
LIBS	./Makefile	/^LIBS = -lpthread$/;"	m
MAX_ARP_SIZE	./include/arpcache.h	10;"	d
NET_CONST_MTU	./include/types.h	6;"	d
NET_IP_FMT_STR	./include/ip.h	53;"	d
OBJS	./Makefile	/^OBJS = $(patsubst %.c,%.o,$(SRCS))$/;"	m
ROUTE_BATCH_SIZE	./rtable_internal.c	15;"	d	file:
RouterTopo	./router_topo.py	/^class RouterTopo(Topo):$/;"	c
SRCS	./Makefile	/^SRCS = arp.c arpcache.c icmp.c ip.c main.c packet.c rtable.c rtable_internal.c$/;"	m
TARGET	./Makefile	/^TARGET = router$/;"	m
WARNING	./include/log.h	/^enum log_level { DEBUG = 0, INFO, WARNING, ERROR };$/;"	e	enum:log_level
__ARPCACHE_H__	./include/arpcache.h	2;"	d
__ARP_H__	./include/arp.h	2;"	d
__BASE_H__	./include/base.h	2;"	d
__CHECKSUM_H__	./include/checksum.h	2;"	d
__ETHER_H__	./include/ether.h	2;"	d
__HASH_H__	./include/hash.h	2;"	d
__ICMP_H__	./include/icmp.h	2;"	d
__IP_H__	./include/ip.h	2;"	d
__LIST_H__	./include/list.h	2;"	d
__LOG_H__	./include/log.h	2;"	d
__PACKET_H__	./include/packet.h	2;"	d
__RTABLE_H__	./include/rtable.h	2;"	d
__TYPES_H__	./include/types.h	2;"	d
add_rt_entry	./rtable.c	/^void add_rt_entry(rt_entry_t *entry)$/;"	f
added	./include/arpcache.h	/^	time_t added;$/;"	m	struct:arp_cache_entry
arp_cache_entry	./include/arpcache.h	/^struct arp_cache_entry {$/;"	s
arp_hln	./include/arp.h	/^    u8	arp_hln;		\/* Length of hardware address.  *\/$/;"	m	struct:ether_arp
arp_hrd	./include/arp.h	/^    u16 arp_hrd;		\/* Format of hardware address.  *\/$/;"	m	struct:ether_arp
arp_op	./include/arp.h	/^    u16 arp_op;			\/* ARP opcode (command).  *\/$/;"	m	struct:ether_arp
arp_pln	./include/arp.h	/^    u8	arp_pln;		\/* Length of protocol address.  *\/$/;"	m	struct:ether_arp
arp_pro	./include/arp.h	/^    u16 arp_pro;		\/* Format of protocol address.  *\/$/;"	m	struct:ether_arp
arp_req	./include/arpcache.h	/^struct arp_req {$/;"	s
arp_send_reply	./arp.c	/^void arp_send_reply(iface_info_t *iface, struct ether_arp *req_hdr)$/;"	f
arp_send_request	./arp.c	/^void arp_send_request(iface_info_t *iface, u32 dst_ip)$/;"	f
arp_sha	./include/arp.h	/^	u8	arp_sha[ETH_ALEN];	\/* sender hardware address *\/$/;"	m	struct:ether_arp
arp_spa	./include/arp.h	/^	u32	arp_spa;		\/* sender protocol address *\/$/;"	m	struct:ether_arp
arp_tha	./include/arp.h	/^	u8	arp_tha[ETH_ALEN];	\/* target hardware address *\/$/;"	m	struct:ether_arp
arp_tpa	./include/arp.h	/^	u32	arp_tpa;		\/* target protocol address *\/$/;"	m	struct:ether_arp
arpcache	./arpcache.c	/^static arpcache_t arpcache;$/;"	v	file:
arpcache_append_packet	./arpcache.c	/^void arpcache_append_packet(iface_info_t *iface, u32 ip4, char *packet, int len)$/;"	f
arpcache_destroy	./arpcache.c	/^void arpcache_destroy()$/;"	f
arpcache_init	./arpcache.c	/^void arpcache_init()$/;"	f
arpcache_insert	./arpcache.c	/^void arpcache_insert(u32 ip4, u8 mac[ETH_ALEN])$/;"	f
arpcache_lookup	./arpcache.c	/^int arpcache_lookup(u32 ip4, u8 mac[ETH_ALEN])$/;"	f
arpcache_sweep	./arpcache.c	/^void *arpcache_sweep(void *arg) $/;"	f
arpcache_t	./include/arpcache.h	/^} arpcache_t;$/;"	t	typeref:struct:__anon2
buf	./rtable_internal.c	/^	char buf[ROUTE_BATCH_SIZE];$/;"	m	struct:__anon1	file:
build	./router_topo.py	/^    def build(self):$/;"	m	class:RouterTopo
cached_packets	./include/arpcache.h	/^	struct list_head cached_packets;$/;"	m	struct:arp_req	typeref:struct:arp_req::list_head
cached_pkt	./include/arpcache.h	/^struct cached_pkt {$/;"	s
checksum	./include/checksum.h	/^static inline u16 checksum(u16 *ptr, int nbytes, u32 sum)$/;"	f
checksum	./include/icmp.h	/^	u16	checksum;$/;"	m	struct:icmphdr
checksum	./include/ip.h	/^    u16 checksum;$/;"	m	struct:iphdr
clear_rtable	./rtable.c	/^void clear_rtable()$/;"	f
code	./include/icmp.h	/^	u8	code;$/;"	m	struct:icmphdr
daddr	./include/ip.h	/^    u32 daddr;$/;"	m	struct:iphdr
delete_list	./include/list.h	67;"	d
dest	./include/rtable.h	/^	u32 dest;				\/\/ destination ip address (could be network or host)$/;"	m	struct:__anon3
entries	./include/arpcache.h	/^	struct arp_cache_entry entries[MAX_ARP_SIZE];$/;"	m	struct:__anon2	typeref:struct:__anon2::arp_cache_entry
ether_arp	./include/arp.h	/^struct ether_arp {$/;"	s
ether_dhost	./include/ether.h	/^	u8 ether_dhost[ETH_ALEN];$/;"	m	struct:ether_header
ether_header	./include/ether.h	/^struct ether_header {$/;"	s
ether_shost	./include/ether.h	/^	u8 ether_shost[ETH_ALEN];$/;"	m	struct:ether_header
ether_type	./include/ether.h	/^	u16 ether_type;$/;"	m	struct:ether_header
fd	./include/base.h	/^	int fd;$/;"	m	struct:__anon8
fd_to_iface	./main.c	/^static iface_info_t *fd_to_iface(int fd)$/;"	f	file:
fds	./include/base.h	/^	struct pollfd *fds;$/;"	m	struct:__anon7	typeref:struct:__anon7::pollfd
find_available_ifaces	./main.c	/^static void find_available_ifaces()$/;"	f	file:
flags	./include/rtable.h	/^	int flags;				\/\/ flags (could be omitted here)$/;"	m	struct:__anon3
frag_off	./include/ip.h	/^    u16 frag_off;$/;"	m	struct:iphdr
get_unparsed_route_info	./rtable_internal.c	/^static int get_unparsed_route_info(char *buf, int size)$/;"	f	file:
gw	./include/rtable.h	/^	u32 gw;					\/\/ ip address of next hop (will be 0 if dest is in $/;"	m	struct:__anon3
handle_arp_packet	./arp.c	/^void handle_arp_packet(iface_info_t *iface, char *packet, int len)$/;"	f
handle_ip_packet	./ip.c	/^void handle_ip_packet(iface_info_t *iface, char *packet, int len)$/;"	f
handle_packet	./main.c	/^void handle_packet(iface_info_t *iface, char *packet, int len)$/;"	f
hash16	./include/hash.h	/^static inline u16 hash16(char *addr, int len)$/;"	f
hash8	./include/hash.h	/^static inline u8 hash8(char *addr, int len)$/;"	f
icmp_checksum	./include/icmp.h	/^static inline u16 icmp_checksum(struct icmphdr *icmp, int len)$/;"	f
icmp_identifier	./include/icmp.h	22;"	d
icmp_mtu	./include/icmp.h	24;"	d
icmp_send_packet	./icmp.c	/^void icmp_send_packet(const char *in_pkt, int len, u8 type, u8 code)$/;"	f
icmp_sequence	./include/icmp.h	23;"	d
icmphdr	./include/icmp.h	/^struct icmphdr {$/;"	s
id	./include/ip.h	/^    u16 id;$/;"	m	struct:iphdr
identifier	./include/icmp.h	/^			u16 identifier;$/;"	m	struct:icmphdr::__anon4::__anon5
if_index_to_name	./rtable_internal.c	/^static void if_index_to_name(int if_index, char *if_name)$/;"	f	file:
if_name	./include/rtable.h	/^	char if_name[16];		\/\/ name of the interface$/;"	m	struct:__anon3
if_name_to_iface	./rtable_internal.c	/^static iface_info_t *if_name_to_iface(const char *if_name)$/;"	f	file:
iface	./include/arpcache.h	/^	iface_info_t *iface;$/;"	m	struct:arp_req
iface	./include/rtable.h	/^	iface_info_t *iface;	\/\/ pointer to the interface structure$/;"	m	struct:__anon3
iface_info_t	./include/base.h	/^} iface_info_t;$/;"	t	typeref:struct:__anon8
iface_list	./include/base.h	/^	struct list_head iface_list;$/;"	m	struct:__anon7	typeref:struct:__anon7::list_head
iface_send_packet	./packet.c	/^void iface_send_packet(iface_info_t *iface, char *packet, int len)$/;"	f
iface_send_packet_by_arp	./arp.c	/^void iface_send_packet_by_arp(iface_info_t *iface, u32 dst_ip, char *packet, int len)$/;"	f
ihl	./include/ip.h	/^    unsigned int ihl:4;$/;"	m	struct:iphdr
index	./include/base.h	/^	int index;$/;"	m	struct:__anon8
init_all_ifaces	./main.c	/^void init_all_ifaces()$/;"	f
init_list_head	./include/list.h	/^static inline void init_list_head(struct list_head *list)$/;"	f
init_rtable	./rtable.c	/^void init_rtable()$/;"	f
init_ustack	./main.c	/^void init_ustack()$/;"	f
instance	./main.c	/^ustack_t *instance;$/;"	v
ip	./include/base.h	/^	u32 ip;$/;"	m	struct:__anon8
ip4	./include/arpcache.h	/^	u32 ip4; 	\/\/ stored in host byte order$/;"	m	struct:arp_cache_entry
ip4	./include/arpcache.h	/^	u32 ip4;$/;"	m	struct:arp_req
ip_checksum	./include/ip.h	/^static inline u16 ip_checksum(struct iphdr *hdr)$/;"	f
ip_forward_packet	./ip.c	/^void ip_forward_packet(u32 ip_dst, char *packet, int len)$/;"	f
ip_init_hdr	./ip.c	/^void ip_init_hdr(struct iphdr *ip, u32 saddr, u32 daddr, u16 len, u8 proto)$/;"	f
ip_send_packet	./ip.c	/^void ip_send_packet(char *packet, int len)$/;"	f
ip_str	./include/base.h	/^	char ip_str[16];$/;"	m	struct:__anon8
iphdr	./include/ip.h	/^struct iphdr {$/;"	s
is	./include/icmp.h	/^		} is;$/;"	m	union:icmphdr::__anon4	typeref:struct:icmphdr::__anon4::__anon5
len	./include/arpcache.h	/^	int len;$/;"	m	struct:cached_pkt
list	./include/arpcache.h	/^	struct list_head list;$/;"	m	struct:arp_req	typeref:struct:arp_req::list_head
list	./include/arpcache.h	/^	struct list_head list;$/;"	m	struct:cached_pkt	typeref:struct:cached_pkt::list_head
list	./include/base.h	/^	struct list_head list;$/;"	m	struct:__anon8	typeref:struct:__anon8::list_head
list	./include/rtable.h	/^	struct list_head list;$/;"	m	struct:__anon3	typeref:struct:__anon3::list_head
list_add_head	./include/list.h	/^static inline void list_add_head(struct list_head *new, struct list_head *head)$/;"	f
list_add_tail	./include/list.h	/^static inline void list_add_tail(struct list_head *new, struct list_head *head)$/;"	f
list_delete_entry	./include/list.h	/^static inline void list_delete_entry(struct list_head *entry)$/;"	f
list_empty	./include/list.h	10;"	d
list_entry	./include/list.h	12;"	d
list_for_each	./include/list.h	15;"	d
list_for_each_entry	./include/list.h	18;"	d
list_for_each_entry_safe	./include/list.h	27;"	d
list_for_each_prev	./include/list.h	33;"	d
list_for_each_safe	./include/list.h	23;"	d
list_head	./include/list.h	/^struct list_head {$/;"	s
list_insert	./include/list.h	/^static inline void list_insert(struct list_head *new,$/;"	f
load_rtable_from_kernel	./rtable_internal.c	/^void load_rtable_from_kernel()$/;"	f
lock	./include/arpcache.h	/^	pthread_mutex_t lock;$/;"	m	struct:__anon2
log	./include/log.h	25;"	d
log_it	./include/log.h	17;"	d
log_it	./include/log.h	21;"	d
log_level	./include/log.h	/^enum log_level { DEBUG = 0, INFO, WARNING, ERROR };$/;"	g
log_level_str	./include/log.h	/^static const char *log_level_str[] = { "DEBUG", "INFO", "WARNING", "ERROR" };$/;"	v
longest_prefix_match	./ip.c	/^rt_entry_t *longest_prefix_match(u32 dst)$/;"	f
mac	./include/arpcache.h	/^	u8 mac[ETH_ALEN];$/;"	m	struct:arp_cache_entry
mac	./include/base.h	/^	u8	mac[ETH_ALEN];$/;"	m	struct:__anon8
main	./main.c	/^int main(int argc, const char **argv)$/;"	f
mask	./include/base.h	/^	u32 mask;$/;"	m	struct:__anon8
mask	./include/rtable.h	/^	u32 mask;				\/\/ network mask of dest$/;"	m	struct:__anon3
mtu	./include/icmp.h	/^			u16 mtu;$/;"	m	struct:icmphdr::__anon4::__anon6
name	./include/base.h	/^	char name[16];$/;"	m	struct:__anon8
net	./router_topo.py	/^    net = Mininet(topo = topo, controller = None) $/;"	v	class:RouterTopo
new_rt_entry	./rtable.c	/^rt_entry_t *new_rt_entry(u32 dest, u32 mask, u32 gw, iface_info_t *iface)$/;"	f
next	./include/list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
nifs	./include/base.h	/^	int nifs;$/;"	m	struct:__anon7
nlmsg_hdr	./rtable_internal.c	/^	struct nlmsghdr nlmsg_hdr;$/;"	m	struct:__anon1	typeref:struct:__anon1::nlmsghdr	file:
open_device	./main.c	/^int open_device(const char *dname)$/;"	f
packet	./include/arpcache.h	/^	char *packet;$/;"	m	struct:cached_pkt
packet_to_ip_hdr	./include/ip.h	/^static inline struct iphdr *packet_to_ip_hdr(const char *packet)$/;"	f
parse_routing_info	./rtable_internal.c	/^static int parse_routing_info(char *buf, int len)$/;"	f	file:
prev	./include/list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::
print_rtable	./rtable.c	/^void print_rtable()$/;"	f
protocol	./include/ip.h	/^    u8 protocol;$/;"	m	struct:iphdr
read_iface_info	./main.c	/^int read_iface_info(iface_info_t *iface)$/;"	f
remove_rt_entry	./rtable.c	/^void remove_rt_entry(rt_entry_t *entry)$/;"	f
req_list	./include/arpcache.h	/^	struct list_head req_list;$/;"	m	struct:__anon2	typeref:struct:__anon2::list_head
retries	./include/arpcache.h	/^	int retries;$/;"	m	struct:arp_req
route_request	./rtable_internal.c	/^} route_request;$/;"	t	typeref:struct:__anon1	file:
rt_entry_t	./include/rtable.h	/^} rt_entry_t;$/;"	t	typeref:struct:__anon3
rt_msg	./rtable_internal.c	/^	struct rtmsg rt_msg;$/;"	m	struct:__anon1	typeref:struct:__anon1::rtmsg	file:
rtable	./rtable.c	/^struct list_head rtable;$/;"	v	typeref:struct:list_head
saddr	./include/ip.h	/^    u32 saddr;$/;"	m	struct:iphdr
sent	./include/arpcache.h	/^	time_t sent;$/;"	m	struct:arp_req
sequence	./include/icmp.h	/^			u16 sequence;$/;"	m	struct:icmphdr::__anon4::__anon5
this_log_level	./include/log.h	/^static enum log_level this_log_level = DEBUG;$/;"	v	typeref:enum:log_level
thread	./include/arpcache.h	/^	pthread_t thread;$/;"	m	struct:__anon2
topo	./router_topo.py	/^    topo = RouterTopo()$/;"	v	class:RouterTopo
tos	./include/ip.h	/^    u8 tos;$/;"	m	struct:iphdr
tot_len	./include/ip.h	/^    u16 tot_len;$/;"	m	struct:iphdr
ttl	./include/ip.h	/^    u8 ttl;$/;"	m	struct:iphdr
type	./include/icmp.h	/^	u8	type;$/;"	m	struct:icmphdr
u	./include/icmp.h	/^	} u;$/;"	m	struct:icmphdr	typeref:union:icmphdr::__anon4
u16	./include/types.h	/^typedef uint16_t u16;$/;"	t
u32	./include/types.h	/^typedef uint32_t u32;$/;"	t
u64	./include/types.h	/^typedef uint64_t u64;$/;"	t
u8	./include/types.h	/^typedef uint8_t u8;$/;"	t
um	./include/icmp.h	/^		} um;$/;"	m	union:icmphdr::__anon4	typeref:struct:icmphdr::__anon4::__anon6
unused	./include/icmp.h	/^			u16 unused;$/;"	m	struct:icmphdr::__anon4::__anon6
ustack_run	./main.c	/^void ustack_run()$/;"	f
ustack_t	./include/base.h	/^} ustack_t;$/;"	t	typeref:struct:__anon7
valid	./include/arpcache.h	/^	int valid;$/;"	m	struct:arp_cache_entry
version	./include/ip.h	/^    unsigned int version:4;$/;"	m	struct:iphdr
